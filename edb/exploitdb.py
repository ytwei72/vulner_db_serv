from common.response import app_ok_p, app_err_p, app_ok, app_err
from common.error_code import Error
from common.utils.http_request import req_get_param_int, req_get_param, req_post_param, req_post_param_int, req_post_param_dict
import common.config

from common.utils.general import SysUtils

import re

# 利用信息集合
edb_info_col = common.config.g_edb_info_col

# 自定义漏洞信息的edb ID号的起始值为900,000
custom_edb_id_base = 900000


class ExploitDB:
    def err_not_custom(self):
        return app_err_p(Error.NEED_CUSTOM_EDB_ID,
                         {'custom_id_base': self.get_custom_id_base()})

    def max_edb_id(self):
        return self.get_field_max_value(edb_info_col, 'edb_id')

    def info_count(self):
        total_count = edb_info_col.count()
        return total_count

    def get_field_max_value(self, coll, field):
        # 字段按照数字顺序整理：collation({'locale': 'zh', 'numericOrdering': True})
        res_curosr = coll.find({}, {'_id': 0, field: 1}).\
            collation({'locale': 'zh', 'numericOrdering': True}).sort(field, -1)
        item = list(res_curosr)[0]
        return item[field]

    def get_field_max_value_int(self, coll, field):
        return int(self.get_field_max_value(coll, field))

    # 检查传入的edb_id，返回建议ID，检查项包括取值范围和是否冲突（edb_id需要唯一）
    def get_suggest_edb_id(self, edb_id):
        max_id = self.get_field_max_value_int(edb_info_col, 'edb_id')
        if max_id < custom_edb_id_base:
            suggest_id = custom_edb_id_base
        else:
            suggest_id = max_id + 1
        if edb_id is None or int(edb_id) < custom_edb_id_base or self.exist_edb_id(edb_id):
            return str(suggest_id)
        else:
            return edb_id

    def get_custom_id_base_int(self):
        return custom_edb_id_base

    def get_custom_id_base(self):
        return str(custom_edb_id_base)

    def query(self, offset, count):
        result_cursor = edb_info_col.find({}, {'_id': 0})
        item_list = list(result_cursor[offset: offset + count])
        return item_list

    def query_all(self):
        count = self.info_count()
        return self.query(0, count)

    def fetch(self, edb_id):
        doc = edb_info_col.find_one({'edb_id': edb_id}, {'_id': 0})
        return doc

    def filter(self, field, value):
        if field in ['os', 'service', 'db', 'PLC']:
            key = 'description'
            # 针对厂商名称做英文转换
            if value == '西门子':
                value = 'siemens'
            elif value == '施耐德':
                value = 'schneider'
            elif value == '菲尼克斯':
                value = 'phoenix'
            elif value == '通用电气' or value == '通用电气软件组态':
                value = 'GE'
        else:
            return None

        # 正则表达式匹配整个单词：re.compile(r'\b%s\b' % word, re.IGNORECASE)
        # \b表示单词的开始和结束
        result_cursor = edb_info_col.find({key: re.compile(r'\b%s\b' % value, re.IGNORECASE)}, {'_id': 0})
        return result_cursor

    def search(self, value):
        key = 'description'
        # 正则表达式匹配整个单词：re.compile(r'\b%s\b' % word, re.IGNORECASE)
        # \b表示单词的开始和结束
        result_cursor = edb_info_col.find({key: re.compile(r'%s' % value, re.IGNORECASE)}, {'_id': 0})
        return result_cursor

    def get_index_coll(self, field):
        index_coll = None
        field_name = 'name'
        if field == 'author':
            index_coll = common.config.g_author_coll
        elif field == 'type':
            index_coll = common.config.g_type_coll
        elif field == 'platform':
            index_coll = common.config.g_platform_coll
            field_name = 'platform'
        return index_coll, field_name

    def fetch_field_id(self, field, value):
        # 不同的字段对应不同的字段索引集合
        index_coll, field_name = self.get_index_coll(field)
        if index_coll is None:
            return None
        # 在字段索引集合中查找指定值是否已存在
        item = index_coll.find_one({field_name: value})
        if item is not None:
            return item['id']

        # 新的域值的ID取值，在现有数据的最大ID的基础上增加1
        id = self.get_field_max_value_int(index_coll, 'id') + 1
        id_str = str(id)
        # 写入该条字段索引信息
        result = index_coll.insert_one({'id': id_str, field_name: value})
        return id_str

    def exist_edb_id(self, edb_id):
        item = edb_info_col.find_one({'edb_id': edb_id})
        return item is not None

    def custom_edb_id(self, edb_id):
        return int(edb_id) >= custom_edb_id_base

    def add(self, item):
        result = edb_info_col.insert_one(item)
        return result

    def update(self, edb_id, item):
        result = edb_info_col.update_one({'edb_id': edb_id}, {'$set': item})
        return result

    def delete(self, edb_id):
        result = edb_info_col.delete_one({'edb_id': edb_id})
        return result

    def query_type(self):
        result_cursor = common.config.g_type_coll.find({}, {'_id': 0})
        return list(result_cursor)

    def query_platform(self):
        result_cursor = common.config.g_platform_coll.find({}, {'_id': 0})
        return list(result_cursor)

    def fetch_some(self, id_list):
        docs = []
        for edb_id in id_list:
            edb_id = edb_id.strip()
            doc = self.fetch(edb_id)
            if doc is not None:
                docs.append(doc)
        return docs

    def fetch_range(self, id_from, id_to):
        where_from = 'NumberInt(obj.edb_id) >= {}'.format(id_from)
        where_to = 'NumberInt(obj.edb_id) <= {}'.format(id_to)
        result_cursor = edb_info_col.find({'$and': [{'$where': where_from}, {'$where': where_to}]}, {'_id': 0})
        docs = list(result_cursor)
        return docs
